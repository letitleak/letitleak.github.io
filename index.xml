<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LetItLeak</title>
    <link>http://www.letitleak.com/</link>
    <description>Recent content on LetItLeak</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Yohaï Berreby</copyright>
    <lastBuildDate>Sat, 21 May 2016 13:19:33 +0200</lastBuildDate>
    <atom:link href="http://www.letitleak.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>http://www.letitleak.com/about/</link>
      <pubDate>Sat, 21 May 2016 13:19:33 +0200</pubDate>
      
      <guid>http://www.letitleak.com/about/</guid>
      <description>&lt;p&gt;Hi! I&amp;rsquo;m Yohaï Berreby, or &lt;a href=&#34;https://github.com/yberreby&#34;&gt;@yberreby&lt;/a&gt; for short. I
am a self-taught developer.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m not studying, I spend time studying programming, hacking around,
reading technical articles, mainly on &lt;a href=&#34;http://news.ycombinator.com&#34;&gt;Hacker News&lt;/a&gt;
and &lt;a href=&#34;http://www.reddit.com/r/programming&#34;&gt;reddit&lt;/a&gt;. I started being
interested in programming around 2011.&lt;/p&gt;

&lt;p&gt;I first dabbled with C, then went on to learn some Python, Ruby, client- and
server-side (with Node.js) JavaScript. But these days, I&amp;rsquo;m mainly using
&lt;a href=&#34;http://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;, a promising systems programming language
backed by Mozilla featuring zero-cost abstractions, a very strong type system
and compile-time prevention of memory unsafety and data races.&lt;/p&gt;

&lt;p&gt;In the past, I wrote a few Node.js bots to interface with
&lt;a href=&#34;http://steampowered.com/&#34;&gt;Steam&lt;/a&gt; trading, using
the &lt;a href=&#34;https://github.com/seishun/node-steam&#34;&gt;&lt;code&gt;node-steam&lt;/code&gt;&lt;/a&gt; NPM module.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rgo: a Go compiler toolchain, written in Rust.</title>
      <link>http://www.letitleak.com/projects/rgo/</link>
      <pubDate>Sat, 21 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.letitleak.com/projects/rgo/</guid>
      <description>&lt;p&gt;My new project, &lt;a href=&#34;https://github.com/yberreby/rgo&#34;&gt;&lt;code&gt;rgo&lt;/code&gt;&lt;/a&gt;, is a Go compiler
toolchain, written in &lt;a href=&#34;http://rust-lang.org/&#34;&gt;Rust&lt;/a&gt;. It&amp;rsquo;s not finished yet, but
it&amp;rsquo;s basically going to be a program that can compile Go code down to machine
code, as well as a library that can be used to parse Go code, among other
things.&lt;/p&gt;

&lt;p&gt;I started writing &lt;code&gt;rgo&lt;/code&gt; because I had a goal: learning how to write a
fully-fledged compiler for a programming language that people actuall use. Not a
toy language, because, although that would have been much simpler, it would also
be a much less rewarding and interesting experience.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve always wanted to write a compiler or an interpreter - &lt;em&gt;something&lt;/em&gt; that
takes code and turns it into something runnable. Lisp has been reimplemented
again and again, and was too simple. C compilers are also commonplace, AND the
language has its share of warts.&lt;/p&gt;

&lt;p&gt;So I chose to write a compiler for Go. I dislike many of the language&amp;rsquo;s design
choices, but it seemed like a good fit. To the best of my knowledge, there is no
reimplementation of the Go compiler, whether in Rust or in another language, so
I decided to write one.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an additional challenge: I know very, very little Go, so I&amp;rsquo;m learning
the language along the way. As of writing, I&amp;rsquo;ve only written a few hundred lines
of Go - although I found two bugs in the viper package:
&lt;a href=&#34;https://github.com/spf13/viper/issues/174&#34;&gt;#174&lt;/a&gt; and
&lt;a href=&#34;https://github.com/spf13/viper/issues/175&#34;&gt;#175&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My main reference material is the &lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;Go
Specification&lt;/a&gt;. I use it to look up the syntax of
various constructs and translate that into a bunch of Rust structs and enums.
This is somewhat tedious, but I&amp;rsquo;m learning about Go&amp;rsquo;s syntax along
the way.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>